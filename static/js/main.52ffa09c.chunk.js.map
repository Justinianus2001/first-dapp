{"version":3,"sources":["util/interact.js","alchemylogo.svg","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","methods","message","call","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","code","target","rel","href","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","params","txHash","HelloWorld","useState","walletAddress","setWallet","setStatus","setMessage","newMessage","setNewMessage","useEffect","fetchMessage","events","UpdatedMessages","error","returnValues","fetchWallet","on","accounts","connectWalletPressed","walletResponse","onUpdatePressed","id","src","alchemylogo","alt","onClick","String","substring","style","paddingTop","type","placeholder","onChange","e","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4oCAAAA,EAAQ,KAAUC,SAClB,IAEMC,GAAOC,EADiBH,EAAQ,KAA9BG,mBADWC,sEAIbC,EAAcL,EAAQ,KACtBM,EAAkB,6CAEXC,EAAqB,IAAIL,EAAKM,IAAIC,SAC3CJ,EACAC,GAGSI,EAAkB,iDAAG,8GACRH,EAAmBI,QAAQC,UAAUC,OAD7B,cACxBD,EADwB,yBAEvBA,GAFuB,2CAAH,qDAKlBE,EAAa,iDAAG,oGACrBC,OAAOC,SADc,0CAGUD,OAAOC,SAASC,QAAQ,CAC/CC,OAAQ,wBAJK,cAGXC,EAHW,OAMXC,EAAM,CACRC,OAAQ,oEACRC,QAASH,EAAa,IART,kBAUVC,GAVU,mCAYA,OAAb,KAAIG,KAZS,0CAaN,CACHF,OAAQ,oDAdC,iCAiBN,CACHC,QAAS,GACTD,OAAQ,gBAAQ,KAAIT,UAnBX,yDAwBd,CACHU,QAAS,GACTD,OACI,+BACI,8BACK,IADL,eAEO,IACH,mBAAGG,OAAO,SAASC,IAAI,aAAaC,KAAI,+BAAxC,2FA/BK,yDAAH,qDA0CbC,EAAyB,iDAAG,kGACjCZ,OAAOC,SAD0B,0CAGFD,OAAOC,SAASC,QAAQ,CAC/CC,OAAQ,iBAJiB,aAGvBC,EAHuB,QAMZS,OAAS,GANG,yCAOlB,CACHN,QAASH,EAAa,GACtBE,OAAQ,sEATa,gCAYlB,CACHC,QAAS,GACTD,OAAQ,iEAda,mFAkBtB,CACHC,QAAS,GACTD,OAAQ,gBAAQ,KAAIT,UApBK,yDAwB1B,CACHU,QAAS,GACTD,OACI,+BACI,8BACK,IADL,eAEO,IACH,mBAAGG,OAAO,SAASC,IAAI,aAAaC,KAAI,+BAAxC,2FA/BiB,0DAAH,qDA0CzBG,EAAa,iDAAG,WAAOP,EAASV,GAAhB,sFAEpBG,OAAOC,UAAwB,OAAZM,EAFC,yCAGd,CACHD,OACI,uFALa,UASF,KAAnBT,EAAQkB,OATa,yCAUd,CACHT,OAAQ,mDAXS,cAgBnBU,EAAwB,CAC1BC,GAAI1B,EACJ2B,KAAMX,EACNY,KAAM3B,EAAmBI,QAAQwB,OAAOvB,GAASwB,aAnB5B,kBAwBArB,OAAOC,SAASC,QAAQ,CACzCC,OAAQ,sBACRmB,OAAQ,CAACN,KA1BQ,cAwBfO,EAxBe,yBA4Bd,CACHjB,OACI,0CACM,IACF,mBAAGG,OAAO,SAASC,IAAI,aAAaC,KAAI,yCAAoCY,GAA5E,+DAGA,uBALJ,gHA9Ba,2DA0Cd,CACHjB,OAAQ,gBAAQ,KAAMT,UA3CL,0DAAH,wDCtGX,MAA0B,wCC4H1B2B,EAhHI,WAEjB,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4BF,mBAAS,IAArC,mBAAOnB,EAAP,KAAesB,EAAf,KACA,EAA8BH,mBAAS,iCAAvC,mBAAO5B,EAAP,KAAgBgC,EAAhB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAGAC,qBAAU,WAAM,sDACd,8GACwBrC,IADxB,OACQE,EADR,OAEEgC,EAAWhC,GAFb,2CADc,8EAQd,kHACoCe,IADpC,gBACUL,EADV,EACUA,QAASD,EADnB,EACmBA,OACjBqB,EAAUpB,GACVqB,EAAUtB,GAHZ,2CARc,yBAAC,WAAD,wBAKd2B,GAaAzC,EAAmB0C,OAAOC,gBAAgB,CAAC,GAAG,SAACC,EAAOjB,GAChDiB,EACFR,EAAU,gBAAQQ,EAAMvC,UAExBgC,EAAWV,EAAKkB,aAAa,IAC7BN,EAAc,IACdH,EAAU,+CAEb,IA1Ba,mCAadU,GAiBItC,OAAOC,SACTD,OAAOC,SAASsC,GAAG,mBAAmB,SAACC,GACjCA,EAAS3B,OAAS,GACpBc,EAAUa,EAAS,IACnBZ,EAAU,uEAEVD,EAAU,IACVC,EAAU,gEAEb,IAEDA,EACE,8BACG,IADH,eAEK,IACH,mBAAGnB,OAAO,SAASC,IAAI,aAAaC,KAAI,+BAAxC,uFA9BP,GAAE,IAuCH,IAAM8B,EAAoB,iDAAG,8GACE1C,IADF,OAEW,qBADhC2C,EADqB,QAEDnC,SACxBoB,EAAUe,EAAenC,SAE3BqB,EAAUc,EAAepC,QALE,2CAAH,qDAQpBqC,EAAe,iDAAG,gHACG7B,EAAcY,EAAeI,GADhC,gBACdxB,EADc,EACdA,OACRsB,EAAUtB,GAFY,2CAAH,qDAMrB,OACE,sBAAKsC,GAAG,YAAR,UACE,qBAAKA,GAAG,OAAOC,IAAKC,EAAaC,IAAI,KACrC,wBAAQH,GAAG,eAAeI,QAASP,EAAnC,SACGf,EAAcb,OAAS,EACtB,cACAoC,OAAOvB,GAAewB,UAAU,EAAG,GACnC,MACAD,OAAOvB,GAAewB,UAAU,IAEhC,oDAIJ,oBAAIC,MAAO,CAAEC,WAAY,QAAzB,8BACA,4BAAIvD,IAEJ,oBAAIsD,MAAO,CAAEC,WAAY,QAAzB,0BAEA,gCACE,uBACEC,KAAK,OACLC,YAAY,6CACZC,SAAU,SAACC,GAAD,OAAOzB,EAAcyB,EAAE/C,OAAOgD,MAA9B,EACVA,MAAO3B,IAET,mBAAGc,GAAG,SAAN,SAAgBtC,IAEhB,wBAAQsC,GAAG,UAAUI,QAASL,EAA9B,yBAMP,E,OC/Gce,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACA,cAAC,EAAD,KAGH,ECGcC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECJDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.52ffa09c.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0x4e7A32F0e5EAA4376b33c1f3aD0593d5A72B6e8E\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contract(\r\n    contractABI,\r\n    contractAddress\r\n);\r\n\r\nexport const loadCurrentMessage = async () => {\r\n    const message = await helloWorldContract.methods.message().call();\r\n    return message;\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"👆🏽 Write a message in the text-field above.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            if (err.code === 4001) {\r\n                return {\r\n                    status: \"😥 Please connect to MetaMask to use.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"😥 \" + err.message,\r\n                };\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_accounts\",\r\n            });\r\n            if (addressArray.length > 0) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"👆🏽 Write a message in the text-field above.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"🦊 Connect to Metamask using the top right button.\",\r\n                };\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"😥 \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n    //input error handling\r\n    if (!window.ethereum || address === null) {\r\n        return {\r\n            status:\r\n                \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\r\n        };\r\n    }\r\n\r\n    if (message.trim() === \"\") {\r\n        return {\r\n            status: \"❌ Your message cannot be an empty string.\",\r\n        };\r\n    }\r\n\r\n    //set up transaction parameters\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: address, // must match user's active address.\r\n        data: helloWorldContract.methods.update(message).encodeABI(),\r\n    };\r\n\r\n    //sign the transaction\r\n    try {\r\n        const txHash = await window.ethereum.request({\r\n            method: \"eth_sendTransaction\",\r\n            params: [transactionParameters],\r\n        });\r\n        return {\r\n            status: (\r\n                <span>\r\n                    ✅{\" \"}\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\r\n                        View the status of your transaction on Etherscan!\r\n                    </a>\r\n                    <br />\r\n                    ℹ️ Once the transaction is verified by the network, the message will\r\n                    be updated automatically.\r\n                </span>\r\n            ),\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            status: \"😥 \" + error.message,\r\n        };\r\n    }\r\n};\r\n","export default __webpack_public_path__ + \"static/media/alchemylogo.9821dc1c.svg\";","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  helloWorldContract,\r\n  connectWallet,\r\n  updateMessage,\r\n  loadCurrentMessage,\r\n  getCurrentWalletConnected,\r\n} from \"./util/interact.js\";\r\n\r\nimport alchemylogo from \"./alchemylogo.svg\";\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  //called only once\r\n  useEffect(() => {\r\n    async function fetchMessage() {\r\n      const message = await loadCurrentMessage();\r\n      setMessage(message);\r\n    }\r\n    fetchMessage();\r\n    addSmartContractListener();\r\n\r\n    async function fetchWallet() {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n    }\r\n    fetchWallet();\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addSmartContractListener() { //TODO: implement\r\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\r\n      if (error) {\r\n        setStatus(\"😥 \" + error.message);\r\n      } else {\r\n        setMessage(data.returnValues[1]);\r\n        setNewMessage(\"\");\r\n        setStatus(\"🎉 Your message has been updated!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => { //TODO: implement\r\n    const walletResponse = await connectWallet();\r\n    if (typeof walletResponse.address !== 'undefined') {\r\n      setWallet(walletResponse.address);\r\n    }\r\n    setStatus(walletResponse.status);\r\n  };\r\n\r\n  const onUpdatePressed = async () => {\r\n    const { status } = await updateMessage(walletAddress, newMessage);\r\n    setStatus(status);\r\n  };\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <img id=\"logo\" src={alchemylogo} alt=\"\"></img>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\r\n      <p>{message}</p>\r\n\r\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"status\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;\r\n","import HelloWorld from './HelloWorld'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <HelloWorld></HelloWorld>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}